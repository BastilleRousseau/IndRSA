head(table500)
plot(grid500[[1]])
ls_ind<-ind_clust(table500)
plot(grid500[[2]])
grid100<-loop(traj, 100)
plot(grid100[[1]])
table100<-table_cluster(traj, grid100)
albatrosssp
data(albatrosssp)
data(albatross)
grid<-loop(traj, 35000)
grid<-loop(albatross, 35000)
plot(grid[[1]])
table_grid<-table_cluster(traj, grid100)
head(table_grid)
ls_ind<-ind_clust(table_grid)
table(unlist(lapply(ls, function(x) x$G)))
table(unlist(lapply(ls_ind, function(x) x$G)))
table_grid<-table_cluster(albatross, grid)
ls_ind<-ind_clust(table_grid)
table(unlist(lapply(ls_ind, function(x) x$G)))
pop<-pop_clust(albatross, ls_ind)
pop[[1]]$parameters$mean
pop[[1]]$parameters$pro
out<-data.frame(unclass(table(pop[[2]]$ID,pop[[2]]$clust)))
out[out!=0]<-1
colSums(out)/6
clust_stack<-clust_stack(grid, pop, ls_100, table_grid)
clust_stack<-clust_stack(grid, pop, ls_ind, table_grid)
pop_stack<-pop_stack(clust_stack)
projection(pop_stack)<- CRS("+init=epsg:32616")
plot(pop_stack)
pop_overl<-pop_overl(clust_stack)
plot(pop_overl)
?plot.raster
table(values(pop_overl))
plot(clust_stack[[1]])
pop[[1]]$parameters$mean
load("C:/Users/Guillaume/OneDrive/Tortoise/Analysis/Timing/Class_final.Rdata")
head(out1)
class(out1)
length(out1)
names(out1)
library(ctmm)
?ctmm.fit
36/480
library(devtools)
install_github("BastilleRousseau/moveNT")
library(moveNT)
library(devtools)
install_github("BastilleRousseau/moveNT")
install.packages("devtools")
library(devtools)
install_github("BastilleRousseau/moveNT")
install.packages("backports")
install.packages("backports")
library(sp)
library(raster)
install.packages("backports")
library(devtools)
install_github("BastilleRousseau/moveNT")
library(moveNT)
data(puechabonsp)
locs <- puechabonsp$relocs
xy <- coordinates(locs)
df <- as.data.frame(locs)
id <- df$Name
da <- as.character(df$Date)
da <- as.POSIXct(strptime(as.character(df$Date),"%y%m%d", tz = "Europe/Paris"))
litr <- as.ltraj(xy, da, id = id)
# Calculate network metrics
out1 <- loop(litr)
mean_weight <- mosaic_network(out1, index=2, sc=T, fun=mean)
out1[[1]]
out1[[2]]
out1[[3]]
out1[[4]]
out1[[5]]
ls<-out1
index=2
sc=T
fun=mean
layers<-lapply(ls, function(x) x[[index]])
if(sc) {layers<-lapply(layers, scale)}
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
layers_mosaic
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean) #Perform mean weight (not-interpolated)
layers<-lapply(ls, function(x) x[[index]])
if(sc) {layers<-lapply(layers, scale)}
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
layers_mosaic
mosaic_network()
mosaic_network
mosaic
layers
mosaic_network(out1, index=2, sc=T, fun=mean)
mosaic_network(out1, index=2, sc=F, fun=mean)
mosaic_network(out1, index=2, sc=T, fun=mean)
mosaic_network(out1, index=2, sc="T", fun=mean)
sc
layers<-lapply(ls, function(x) x[[index]])
layers<-lapply(layers, scale)
layers<-lapply(ls, function(x) x[[index]])
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
layers<-lapply(ls, function(x) x[[index]])
layers<-lapply(layers, scale)
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
layers_mosaic
plot(layers_mosaic)
sc
sc="T"
if(sc) {layers<-lapply(layers, scale)}
mean_weight<-mosaic_network(out1, index=2, sc="T", fun=mean)
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean)
mean_weight<-mosaic_network(out1, index=2, sc=1, fun=mean)
mean_weight<-mosaic_network(out1, index=2, sc=F, fun=mean)
mean_weight<-mosaic_network(out1, index=2, sc=TRUE, fun=mean)
mean_weight<-mosaic_network(out1, index=3, sc=F, fun=mean)
mean_weight<-mosaic_network(out1, index=3, sc=T, fun=mean)
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean)
mosaic_network<-function(ls, index=2, sc=T, fun=mean){
layers<-lapply(ls, function(x) x[[index]])
if(sc==T) {layers<-lapply(layers, scale)}
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
return(layers_mosaic)
}
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean)
mean_weight<-mosaic_network(out1, index=2, sc=F, fun=mean)
library(moveNT)
mosaic_network
mosaic_network<-function(ls, index=2, sc=T, fun=mean){
layers<-lapply(ls, function(x) x[[index]])
if(sc) {layers<-lapply(layers, scale)}
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
return(layers_mosaic)
}
mean_weight<-mosaic_network(out1, index=2, sc="T", fun=mean) #Perform mean weight (not-interpolated)
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean) #Perform mean weight (not-interpolated)
library(moveNT)
data(puechabonsp)
# Prepare data for ltraj
locs <- puechabonsp$relocs
xy <- coordinates(locs)
df <- as.data.frame(locs)
id <- df$Name
da <- as.character(df$Date)
da <- as.POSIXct(strptime(as.character(df$Date),"%y%m%d", tz = "Europe/Paris"))
litr <- as.ltraj(xy, da, id = id)
# Calculate network metrics
out1 <- loop(litr)
# Merge weight over all individuals
mean_weight <- mosaic_network(out1, index=2, sc=T, fun=mean)
mosaic_network<-function(ls, index=2, sc=T, fun=mean){
layers<-lapply(ls, function(x) x[[index]])
if(sc) {layers<-lapply(layers, scale)}
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
return(layers_mosaic)
}
mean_weight<-mosaic_network(out1, index=2, sc="T", fun=mean) #Perform mean weight (not-interpolated)
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean) #Perform mean weight (not-interpolated)
sc
index
out1
remove("mosaic_network")
mosaic_network
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean) #Perform mean weight (not-interpolated)
?scale
#' data(puechabonsp)
#' locs <- puechabonsp$relocs
#' xy <- coordinates(locs)
#' df <- as.data.frame(locs)
#' da <- as.character(df$Date)
#' da <- as.POSIXct(strptime(as.character(df$Date),"%y%m%d", tz="Europe/Paris"))
#' litr <- as.ltraj(xy, da, id = id)
#' out1<-loop(litr)
#' mean_weight<-mosaic_network(out1, index=2, sc="T", fun=mean) #Perform mean weight (not-interpolated)
#' plot(mean_weight)
mosaic_network<-function(ls, index=2, sc=T, fun=mean){
layers<-lapply(ls, function(x) x[[index]])
if(sc==T) {layers<-lapply(layers, raster::scale)}
names(layers)[1:2]<-c("x", "y")
layers$fun<-fun
layers$na.rm<-TRUE
layers_mosaic<-do.call(mosaic, layers)
return(layers_mosaic)
}
mean_weight<-mosaic_network(out1, index=2, sc="T", fun=mean) #Perform mean weight (not-interpolated)
mean_weight<-mosaic_network(out1, index=2, sc=T, fun=mean) #Perform mean weight (not-interpolated)
mean_weight
mean_weight<-mosaic_network(out1, index=2, sc=F, fun=mean) #Perform mean weight (not-interpolated)
mean_weight
library(devtools)
install_github("BastilleRousseau/moveNT")
library(moveNT)
data(puechabonsp)
# Prepare data for ltraj
locs <- puechabonsp$relocs
xy <- coordinates(locs)
df <- as.data.frame(locs)
id <- df$Name
da <- as.character(df$Date)
da <- as.POSIXct(strptime(as.character(df$Date),"%y%m%d", tz = "Europe/Paris"))
litr <- as.ltraj(xy, da, id = id)
# Calculate network metrics
out1 <- loop(litr)
# Merge weight over all individuals
mean_weight <- mosaic_network(out1, index=2, sc=T, fun=mean)
mean_weight <- mosaic_network(out1, index=3, sc=T, fun=mean)
mean_weight <- mosaic_network(out1, index=3, sc=F, fun=mean)
mosaic_network
install.packages("betweenness")
install.packages("igraph")
library(igraph)
?betweenness
?graph_from_adjacency_matrix
adjm <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), nc=10)
g1 <- graph_from_adjacency_matrix( adjm )
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), nc=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
g1
g2
E(g2)$weight
E(g1)$weight
?degree
?transitivity
library(moveNT)
data(albatross)
grid<-loop(albatross, 35000)
table_grid<-table_cluster(albatross, grid)
ls_ind<-ind_clust(table_grid, max.n.clust=8)
pop<-pop_clust(albatross, ls_ind)
pop
clust_stack<-clust_stack(grid, pop, ls_ind, table_grid)
class(clust_stack)
class(clust_stack[[1]])
id<-unique(table$ID)
pop=pop_clust; ind_clust=ls_ind; table<-table_grid
id<-unique(table$ID)
coef2<-cbind(pop_clust[[2]], pop_clust[[1]]$z)
out_ls<-list()
n.clust1<-length(unique(coef2$clust))
head(table_grid)
i=1
id<-unique(table_grid$ID)
coef3<-coef2[coef2$ID==id[i],]
n.clust<-length(coef3$clust)
cl<-((coef3$clust))
coef2<-cbind(pop_clust[[2]], pop_clust[[1]]$z)
pop_clust<-pop
coef2<-cbind(pop_clust[[2]], pop_clust[[1]]$z)
pop<-pop_clust(albatross, ls_ind)
coef2<-cbind(pop_clust[[2]], pop_clust[[1]]$z)
pop
pop_clust<-pop
coef2<-cbind(pop_clust[[2]], pop_clust[[1]]$z)
out_ls<-list()
n.clust1<-length(unique(coef2$clust))
coef3<-coef2[coef2$ID==id[i],]
n.clust<-length(coef3$clust)
cl<-((coef3$clust))
cl
class<-data.frame(cbind(1:length(cl), cl))
prop<-coef3[,as.character(cl)]
out2<-table[table$ID==id[i],]
out2$clust<-ind_clust[[i]]$classification
out2$id<-1:nrow(out2)
out2<-merge(out2, class, by.x="clust", by.y="V1", sort=F)
out2<-out2[order(out2$id),]
out2<-cbind(out2, ind_clust[[i]]$z)
class
head(out2)
dim(out2)
head(out2,10)
for (j in 1:nrow(out2)) {
out2[j,(ncol(out2)-n.clust+1):ncol(out2)]<- out2[j,(ncol(out2)-n.clust+1):ncol(out2)]*prop[out2$clust[j],] #Multiply the two probability
}
head(out2)
table(out2$ID)
dim(out2)
class
table(class)
table(out2$cl, out2$clust
)
n.clust
dd<-values(grid[[i]])
dd2<-apply(dd, 1, function(x) max(is.na(x)))
ind<-which(dd2==0)
r0<-grid[[i]][[1]]
values(r0)<-0
tt <- values(r0)
gr<-stack(r0)
tt[ind]<-out2$cl
gr[[1]]<-setValues(gr[[1]],tt)
for (z in 2:(n.clust1+1)) { gr[[z]]<-r0 }
for (k in 1:n.clust) {
tt[ind]<-out2[,(ncol(out2)-n.clust)+k]
gg<-setValues(gr[[1]],tt)
gr[[cl[k]+1]]<-mosaic(gr[[cl[k]+1]], gg, fun=max)
}
plot(gr)
n.clust
n.clust
n.clust1
k
k=1
cl[k]+1
(ncol(out2)-n.clust)+k
names(out2)[18]
names(out2)[19]
head(out2)
class
names(gr)<-c("Clust", paste("Prop", unique(class$cl), sep=""))
gr
head(coef2)
i=2
coef3<-coef2[coef2$ID==id[i],]
n.clust<-length(coef3$clust)
cl<-((coef3$clust))
class<-data.frame(cbind(1:length(cl), cl))
class
i=3
coef3<-coef2[coef2$ID==id[i],]
n.clust<-length(coef3$clust)
cl<-((coef3$clust))
class<-data.frame(cbind(1:length(cl), cl))
class
prop<-coef3[,as.character(cl)]
out2<-table[table$ID==id[i],]
out2$clust<-ind_clust[[i]]$classification
out2$id<-1:nrow(out2)
out2<-merge(out2, class, by.x="clust", by.y="V1", sort=F)
out2<-out2[order(out2$id),]
out2<-cbind(out2, ind_clust[[i]]$z)
for (j in 1:nrow(out2)) {
out2[j,(ncol(out2)-n.clust+1):ncol(out2)]<- out2[j,(ncol(out2)-n.clust+1):ncol(out2)]*prop[out2$clust[j],] #Multiply the two probability
}
dd<-values(grid[[i]])
dd2<-apply(dd, 1, function(x) max(is.na(x)))
ind<-which(dd2==0)
r0<-grid[[i]][[1]]
values(r0)<-0
tt <- values(r0)
gr<-stack(r0)
tt[ind]<-out2$cl
gr[[1]]<-setValues(gr[[1]],tt)
for (z in 2:(n.clust1+1)) { gr[[z]]<-r0 }
for (k in 1:n.clust) {
tt[ind]<-out2[,(ncol(out2)-n.clust)+k]
gg<-setValues(gr[[1]],tt)
gr[[cl[k]+1]]<-mosaic(gr[[cl[k]+1]], gg, fun=max)
}
plot(gr)
names(gr)<-c("Clust", paste("Prop", unique(class$cl), sep=""))
plot(gr)
library(moveNT)
?loop
loop
traj2adj
library(adehabitatLT)
id
remove(adehabitatLT)
remove.packages(adehabitatLT)
id
library(moveNT)
?scale
?adj2stack
?mosaic_network
log(0)
log(1)
exp(0)
exp(1)
exp(2)
library(nlme)
?gls
library(amt)
install.packages("amt")
library(amt)
?random_points
random_points
amt::random_points()
amt::random_points
amt:::random_points
methods(random_points())
methods(random_points)
methods(random_points.default)
random_points.default
amt:::random_points.default()
amt:::random_points.default
amt:::random_points.hr
random_points_base
amt:::random_points_base
log(0)
log(0.01)
library(moveNT)
?mosaic_network
?interpolation
data(puechabonsp)
locs <- puechabonsp$relocs
xy <- coordinates(locs)
df <- as.data.frame(locs)
da <- as.character(df$Date)
da <- as.POSIXct(strptime(as.character(df$Date),"%y%m%d", tz="Europe/Paris"))
litr <- as.ltraj(xy, da, id = id)
out1<-loop(litr)
xy
da
head(locs)
dim(locs)
litr <- as.ltraj(xy, da, id = locs$Name)
out1<-loop(litr)
out2<-interpolation(litr, out1)
names(out1)
out1
mean_weight<-mosaic_network(out1, index=5, sc=T, fun=max)
out2
mean_weight2<-mosaic_network(out2, index=3, sc=T, fun=max)
mean_weight
mean_weight2
mean_weight2<-mosaic_network(out2, index=3, sc=T, fun=mean())
mean_weight2<-mosaic_network(out2, index=3, sc=T, fun=mean
mean_weight2<-mosaic_network(out2, index=3, sc=T, fun=mean)
mean_weight2<-mosaic_network(out2, index=3, sc=T, fun=mean)
mean_weight2
mean_weight2<-mosaic_network(out2, index=3, sc=T, fun=tt)
mean_weight2<-mosaic_network(out2, index=3, sc=T, fun=min)
mean_weight2
mean_weight<-mosaic_network(out1, index=5, sc=T, fun=max)
mean_weight
mean_weight<-mosaic_network(out1, index=5, sc=T, fun=mean)
mean_weight
mean_weight<-mosaic_network(out1, index=5, sc=T, fun=min)
mean_weight
mosaic_network()
mosaic_network
?mosaic
plot(mean_weight)
plot(litr)
plot(litr[[1]])
plot(litr[1])
plot(litr[2], add=T)
?plot.ltraj
plot(puechcirc, spoldf = cont)
data(puechcirc)
plot(puechcirc)
mosaic_network()
mosaic_network
mean_weight
out1
tt<<lapply(out1, function(x) x[[2]])
tt<-lapply(out1, function(x) x[[2]])
tt
tt<-lapply(out1, function(x) x[[5]])
tt
tt<-lapply(tt, scale)
tt
mean_weight
setwd("D:/OneDrive/Elephant/Course/training module/data")
load("elephants.Rda")
#data(elephants)
library(adehabitatLT)
elephants$date<-as.POSIXct(strptime(as.character(elephants$date),"%Y-%m-%d %H:%M:%S"))
traj<-as.ltraj(xy=elephants[,2:3], date=elephants$date, id=elephants$id)
ref.dat<-strptime("2000-01-01 00:00","%Y-%m-%d %H:%M")
traj2<- sett0(traj, ref.dat, 1, units = "hour", tol=0.5)
traj3<-cutltraj(traj2, "dt > 3600*24",nextr = T)
traj4<-redisltraj(traj3, 3600, type="time")
```
?Mclust
library(mclust)
?Mclust
library(raster)
?extract
length(id)
library(devtools)
setwd("C:/Users/Guillaume/OneDrive/Elephant/Analysis/RSF")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(roxygen2)
setwd("C:/Users/Guillaume/OneDrive/Elephant/Analysis/RSF")
setwd("./IndRSA")
document()
library("devtools")
devtools::document()
getwd()
require(installr)
updateR() # this will open dialog boxes to take you through the steps.
install.packages("installr")
require(installr)
updateR() # this will open dialog boxes to take you through the steps.
